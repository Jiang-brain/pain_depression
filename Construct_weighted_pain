library("survival")
library("survminer")
new_data<-data.frame(matrix(0,nrow=nrow(datas),ncol=ncol(pain_duration)*2))
colnames(new_data)<-c(paste(colnames(pain_duration),'_acute',sep =''),paste(colnames(pain_duration),'_chronic',sep =''))

for (i in c(1:ncol(pain_duration))) {
  index_acute=which(pain_duration[,i]==1)
  new_data[index_acute,i]=1
  new_data[,i]=factor(new_data[,i])
  index_chronic=which(pain_duration[,i]==2)
  new_data[index_chronic,i+8]=1
  new_data[,i+8]=factor(new_data[,i+8])
  rm(index_acute,index_chronic)
}
rm(i)

new_data=cbind(datas[,1:16],new_data)
hr <- coxph(Surv(time, status) ~ headache_acute+headache_chronic+facial_acute+facial_chronic+neck_shoulder_acute+neck_shoulder_chronic+
              back_acute+back_chronic+stomach_acute+stomach_chronic+hip_pain_acute+hip_pain_chronic+knee_acute+knee_chronic+
              body_acute+body_chronic+
              age+gender+ethnicity+deprivation+income+university_education+
              smoking+alcohol+sedentary+vascular_history+cancer+obesity+diabetes, data = new_data)
coeff<-summary(hr)$coefficients
rm(new_data,hr)

###############construct weighted pain scores#####################
new_data<-data.frame(matrix(0,nrow=nrow(datas),ncol=ncol(pain_duration)*2))
colnames(new_data)<-c(paste(colnames(pain_duration),'_acute',sep =''),paste(colnames(pain_duration),'_chronic',sep =''))

for (i in c(1:ncol(pain_duration))) {
  index_acute=which(pain_duration[,i]==1)
  new_data[index_acute,i]=1
  index_chronic=which(pain_duration[,i]==2)
  new_data[index_chronic,i+8]=1
  rm(index_acute,index_chronic)
}
rm(i)
beta<-coeff[1:16,1]
pain_score<-(new_data$headache_acute*beta[1]+new_data$headache_chronic*beta[2]+new_data$facial_acute*beta[3]+new_data$facial_chronic*beta[4]+
  new_data$neck_shoulder_acute*beta[5]+new_data$neck_shoulder_chronic*beta[6]+new_data$back_acute*beta[7]+new_data$back_chronic*beta[8]+
  new_data$stomach_acute*beta[9]+new_data$stomach_chronic*beta[10]+new_data$hip_pain_acute*beta[11]+new_data$hip_pain_chronic*beta[12]+
  new_data$knee_acute*beta[13]+new_data$knee_chronic*beta[14]+new_data$body_acute*beta[15]+new_data$body_chronic*beta[16])/sum(beta)
rm(beta,coeff,new_data)
datas$pain_score=pain_score
rm(pain_score)

########tertiles of weighted scores########
datas$weighted_pain_status=0
scores_excluding_0=datas$pain_score[which(datas$pain_score!=0)]
tertile_point=quantile(scores_excluding_0, probs = seq(0, 1, 1/3),na.rm = TRUE)
rm(scores_excluding_0)
index_low=which(datas$pain_score<tertile_point[2]&datas$pain_score>=tertile_point[1])
index_middle=which(datas$pain_score>=tertile_point[2]&datas$pain_score<=tertile_point[3])
index_high=which(datas$pain_score>tertile_point[3])
datas$weighted_pain_status[index_low]=1
datas$weighted_pain_status[index_middle]=2
datas$weighted_pain_status[index_high]=3
index_pain_free=which(datas$pain_score==0)
datas$weighted_pain_status[index_pain_free]=0
rm(index_low,index_middle,index_high,tertile_point,index_pain_free)
datas$weighted_pain_status=factor(datas$weighted_pain_status)

ordinal_model <- coxph(Surv(time, status) ~ weighted_pain_status+
              age+gender+ethnicity+deprivation+income+university_education+
              smoking+alcohol+sedentary+vascular_history+cancer+obesity+diabetes, data = datas)
summary(ordinal_model)

linear_model <- coxph(Surv(time, status) ~ scale(pain_score)+
              age+gender+ethnicity+deprivation+income+university_education+
              smoking+alcohol+sedentary+vascular_history+cancer+obesity+diabetes, data = datas)
summary(linear_model)


####nonlinear
library(rms)
library(Greg)
dd <- datadist(datas) #为后续程序设定数据环境
options(datadist='dd') #为后续程序设定数据环境
nonlinear_model<- cph(Surv(time, status) ~ rcs(pain_score,3) +age+gender+ethnicity+deprivation+income+university_education+
            smoking+alcohol+sedentary+vascular_history+cancer+obesity+diabetes, data=datas)
P_nonlinear<-anova(nonlinear_model)[2,3]
P_overall<-anova(nonlinear_model)[1,3]
p<-plotHR(nonlinear_model, term="pain_score", xlab="weighted pain scores",se=TRUE,
          polygon_ci=TRUE,
          col.term = "#0070b9",
          col.se = "#DEEBF7BB",
          lwd.term=2,
          lty.term = 1,
          ylog=FALSE,
          alpha=0.05,#alpha level, 95%
          cex=1,
          axes = TRUE,
          plot.bty="l", xlim=c(min(datas$pain_score),max(datas$pain_score)),ylim=c(0,5),rug="density")
plot(p)
Pre0 <-rms::Predict(nonlinear_model,pain_score,fun=exp,type="predictions",ref.zero=TRUE,conf.int = 0.95,digits=2)
rm(dd,p,Pre0)
